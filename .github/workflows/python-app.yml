# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.png'
      - '**.jpg'
      - '**.webp'
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  WORDPRESS_VERSION: "-5.8.2-en_GB"
  DOCUMENT_ROOT: "/var/www/html"

jobs:
  build:

    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check ports 1
      run: |
        sudo ss -tulpn

    - name: Install server packages
      run: |
        sudo apt-get update
        sudo apt-get install -y apache2 \
                                php \
                                php-bcmath \
                                php-curl \
                                php-intl \
                                php-json \
                                php-mbstring \
                                php-mysql \
                                php-xml \
                                php-zip

    - name: Check MySQL
      run: |
        sudo systemctl enable mysql.service
        sudo systemctl start mysql.service
        sudo systemctl status mysql.service

    - name: Initialise WordPress and MySQL
      run: |
        sudo mysql -uroot -proot < wpdbsetup.sql
        sudo mysql -uroot -proot wordpress < full_db_220727_0953-mariadb.sql

        sudo mkdir -p ${{env.DOCUMENT_ROOT}}
        sudo chown www-data: ${{env.DOCUMENT_ROOT}}
        sudo curl "https://en-gb.wordpress.org/wordpress${{env.WORDPRESS_VERSION}}.tar.gz" | sudo -u www-data tar zx --strip-components=1 -C ${{env.DOCUMENT_ROOT}}

        sudo -u www-data cp wp-config.php "${{env.DOCUMENT_ROOT}}/wp-config.php"
        sudo -u www-data cp wp.htaccess "${{env.DOCUMENT_ROOT}}/.htaccess"

    - name: Setup Apache
      run: |
        sudo openssl req -new -newkey ec -pkeyopt ec_paramgen_curve:prime256v1 -days 365 -nodes -x509 \
            -subj "/CN=localhost" \
            -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt
        sudo cp ssl-params.conf /etc/apache2/conf-available/ssl-params.conf
        sudo cp wordpress.conf /etc/apache2/sites-available/wordpress.conf
        sudo a2enmod ssl
        sudo a2enmod headers
        sudo a2enmod rewrite
        sudo a2ensite wordpress
        sudo a2enconf ssl-params
        sudo a2dissite 000-default
        sudo systemctl start apache2
        sudo apache2ctl -M
        # We're not seeing php module at /etc/apache2/mods-enabled/php, so worry
        sudo systemctl status apache2
        sleep 2
        sudo systemctl status apache2
        sudo systemctl reload apache2
        sudo systemctl restart apache2
        sudo apache2ctl -M

    - name: Setup UFW
      run: |
        sudo ufw allow OpenSSH
        echo =============
        cat /etc/default/ufw
        # Default should already be these (cat /etc/default/ufw):
        sudo ufw default allow outgoing
        sudo ufw default deny incoming
        sudo ufw allow 'Apache Full'
        sudo ufw delete allow 'Apache'
        sudo echo "y" | sudo ufw enable

    - name: Check ports 2
      run: |
        sudo ss -tulpn

    - name: Check PHP version
      run: |
        php -v

    - name: Check Apache's php available mods
      run: |
        cat /etc/apache2/mods-available/php*.conf

    - name: Check Apache's php enabled mods
      run: |
        cat /etc/apache2/mods-enabled/php*.conf

    - name: Test TLS Server with cert in situ
      run: |
        curl --cacert /etc/ssl/certs/apache-selfsigned.crt https://localhost

    - name: Test TLS Server without a cert
      run: |
        curl http://localhost

    - name: Test REST API ignoring cert
      run: |
        curl -ki https://localhost/wp-json/wp/v2/users

    - name: Test fudged API ignoring cert
      run: |
        curl -ki https://localhost/index.php?rest_route=/wp/v2/users

    - name: Test hello world post is here
      run: |
        curl -ki https://localhost/2022/08/hello-world/

    - name: Show sites-enabled apache configs
      run: |
        ls -la /etc/apache2/sites-enabled/
        cat /etc/apache2/sites-enabled/wordpress.conf
        cat "${{env.DOCUMENT_ROOT}}/wp-config.php"

    - name: Show apache config
      run: |
        cat /etc/apache2/apache2.conf

    - name: Show WP config
      run: |
        ls -la /etc/apache2/sites-enabled/
        cat /etc/apache2/sites-enabled/wordpress.conf

    - name: Acquire wp_api
      run: |
        git clone https://github.com/ployt0/wp_app_api.git
        cp -r wp_app_api/wp_api tests/

    - name: Grab the TLS cert from WP
      run: |
        echo quit | openssl s_client -showcerts -servername "localhost" -connect localhost:443 > tests/self-signed-cacert.crt

    - name: Test with pytest for coverage
      run: |
        cd tests
        PYTHONPATH=../ss_img_shrinker coverage run --source="../ss_img_shrinker" -m pytest

    - name: Test coverage
      run: |
        cd tests
        PYTHONPATH=../ss_img_shrinker coverage report -m --fail-under=90

